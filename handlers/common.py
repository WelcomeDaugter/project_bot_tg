import asyncio
from aiogram import Router, types, html, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from keyboards.keyboard import get_help, help_button, reg
from handlers.middleware import RegistrationMiddleware
from aiogram.fsm.state import StatesGroup, State
import re
from bd import get_db_connection, is_registered
import hashlib
import sqlite3

common_router = Router()

@common_router.message(Command("start"))
async def cmd_start(message: types.Message):
    if not await is_registered(message.from_user.id):
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è",
            parse_mode=ParseMode.HTML,
            reply_markup=reg()
        )
    else:
        await message.answer(f"–ù–∞–ø–∏—à–∏ /menu, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")

class RegisterState(StatesGroup):
    username = State()
    password = State()

def hash_password(password: str) -> str:
    return hashlib.sha256(password.encode()).hexdigest()

@common_router.message(F.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
@common_router.message(Command("reg"))
async def start_register(message: Message, state: FSMContext):
    await message.answer(f"–ü—Ä–∏–¥—É–º–∞–π—Ç–µ username:")
    await state.set_state(RegisterState.username)

@common_router.message(RegisterState.username)
async def register_name(message: Message, state: FSMContext):
    username = message.text

    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT 1 FROM users WHERE username = ?", (username,))
        if cursor.fetchone():
            await message.answer("‚ùå –≠—Ç–æ—Ç username —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
            return

    await state.update_data(username=username)
    await message.answer(
        f"üëæ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π username: {username}\n"
        f"üîë –¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å:\n"
        f"- –ù–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤\n"
        f"- –•–æ—Ç—è –±—ã 1 —Ü–∏—Ñ—Ä–∞"
    )
    await state.set_state(RegisterState.password)

@common_router.message(RegisterState.password)
async def register_password(message: Message, state: FSMContext):
    password = message.text
    data = await state.get_data()

    if len(password) < 8:
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")
        return

    if not re.search(r'\d', password):
        await message.answer("‚ùå –í –ø–∞—Ä–æ–ª–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 1 —Ü–∏—Ñ—Ä–∞!")
        return

    await state.update_data(password=password)

    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO users (user_id, username, password) VALUES (?, ?, ?)",
                (message.from_user.id, data['username'], hash_password(password))
            )
            conn.commit()

        await state.update_data(password=password)
        data = await state.get_data()
        reg_name = data.get("username")
        reg_password = data.get("password")

        await message.answer(
            "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f" Username: {reg_name}\n"
            f" Password: {'*' * len(reg_password)}",
            reply_markup=ReplyKeyboardRemove()
        )
        await asyncio.sleep(1)
        await message.answer("–ù–∞–ø–∏—à–∏ /menu, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")

    except sqlite3.IntegrityError as e:
        if "UNIQUE constraint failed: users.user_id" in str(e):
            await message.answer("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        elif "UNIQUE constraint failed: users.username" in str(e):
            await message.answer("‚ùå –≠—Ç–æ—Ç username —É–∂–µ –∑–∞–Ω—è—Ç! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /reg")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()

@common_router.message(Command("menu"))
async def cmd_menu(message: types.Message):
    if await is_registered(message.from_user.id):
        await message.answer(
            f"–≠–π, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è {html.bold(html.quote(message.from_user.full_name))}!",
            parse_mode=ParseMode.HTML
        )
        await asyncio.sleep(1)
        await message.answer(
            "–ù–∞–∂–º–∏ –Ω–∞ ¬´/help¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
            reply_markup=get_help()
        )
    else:
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /reg")

@common_router.message(Command("help"))
async def cmd_help(message: Message):
    if await is_registered(message.from_user.id):
        await asyncio.sleep(1)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=help_button()
        )
    else:
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /reg")

@common_router.message(lambda message: message.text == "–¶–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
async def handle_crypto_price_button(message: Message, state: FSMContext):
    from handlers.crypto import price_command
    await price_command(message, state)